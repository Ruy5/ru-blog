import{_ as a,c as e,o as t,a4 as i}from"./chunks/framework.CdAejZTV.js";const g=JSON.parse('{"title":"浏览器常见指纹","description":"","frontmatter":{},"headers":[],"relativePath":"blog/爬虫/浏览器常见指纹.md","filePath":"blog/爬虫/浏览器常见指纹.md"}'),o={name:"blog/爬虫/浏览器常见指纹.md"},s=i(`<h1 id="浏览器常见指纹" tabindex="-1">浏览器常见指纹 <a class="header-anchor" href="#浏览器常见指纹" aria-label="Permalink to &quot;浏览器常见指纹&quot;">​</a></h1><p>参考文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API" target="_blank" rel="noreferrer">Web API 接口参考 | MDN (mozilla.org)</a></p><h3 id="全局相关" tabindex="-1">全局相关： <a class="header-anchor" href="#全局相关" aria-label="Permalink to &quot;全局相关：&quot;">​</a></h3><p>包括：window document</p><h4 id="windows" tabindex="-1">windows <a class="header-anchor" href="#windows" aria-label="Permalink to &quot;windows&quot;">​</a></h4><p><code>window</code>作为全局变量，代表了脚本正在运行的窗口，暴露给 Javascript 代码。windows是最顶层的东西，一般某个浏览器独有的API(例如Chrome的浏览器具有某个属性，但是其他任何浏览器都没有)不会被作为浏览器检测对象，其余所有的API都可能被当作指纹检测</p><p><strong>例如：history.length == ？？？</strong></p><h4 id="document" tabindex="-1">document <a class="header-anchor" href="#document" aria-label="Permalink to &quot;document&quot;">​</a></h4><p><strong><code>Document</code></strong> 接口表示任何在浏览器中载入的网页，并作为网页内容的入口，也就是DOM树。DOM 树包含了像table、tr 这样的元素，以及大量其它元素。它向网页文档本身提供了全局操作功能，能解决如何获取页面的 URL，如何在文档中创建一个新的元素这样的问题</p><p><strong>例如：document.defaultView === window</strong></p><h3 id="环境相关" tabindex="-1">环境相关： <a class="header-anchor" href="#环境相关" aria-label="Permalink to &quot;环境相关：&quot;">​</a></h3><p>包括：navigator screen history</p><h4 id="navigator" tabindex="-1">navigator <a class="header-anchor" href="#navigator" aria-label="Permalink to &quot;navigator&quot;">​</a></h4><p>navigator是浏览器指纹检测最多的，里面包含了经纬度、请求头、UA、浏览器发行商等。补起来也比较简单，大多复制粘贴就行。</p><h3 id="请求相关" tabindex="-1">请求相关： <a class="header-anchor" href="#请求相关" aria-label="Permalink to &quot;请求相关：&quot;">​</a></h3><p>包括：XMLHttpRequest fetch worker</p><p>这种大多补不了，只能通过截断，判断出他想要什么，他请求了什么。</p><h3 id="dom相关" tabindex="-1">Dom相关： <a class="header-anchor" href="#dom相关" aria-label="Permalink to &quot;Dom相关：&quot;">​</a></h3><p>包括：canvas jquery 所有对dom节点的操作</p><p>canvas 在国内一般不检测(有这个对象就行，不检测对象里面究竟是什么)。其他与dom节点相关的一般都不太好补，只能分析他想要干什么，是否参与了计算，如果没有参与计算就不用管他了，如果参与了计算把计算结果补上就行。</p><h3 id="数据库相关" tabindex="-1">数据库相关： <a class="header-anchor" href="#数据库相关" aria-label="Permalink to &quot;数据库相关：&quot;">​</a></h3><p>包括：Storage IndexedDB cookie</p><p>这部分比较好补，</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cookie</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.cookie</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">localStorage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Storage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 里面大多是增删改查的方法</span></span></code></pre></div><h3 id="其他" tabindex="-1">其他： <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他：&quot;">​</a></h3><p>包括：caches,WebGL,AudioContext,WebRTC</p><p>这部分很少被检测</p>`,27),n=[s];function r(h,l,d,p,c,k){return t(),e("div",null,n)}const m=a(o,[["render",r]]);export{g as __pageData,m as default};
