import{_ as s,c as i,o as a,a4 as l}from"./chunks/framework.eSehZVqP.js";const c=JSON.parse('{"title":"在Linux上使用 lsof 和 kill 命令查看端口占用并杀死进程","description":"","frontmatter":{},"headers":[],"relativePath":"blog/linux/查看端口占用并杀死进程.md","filePath":"blog/linux/查看端口占用并杀死进程.md"}'),h={name:"blog/linux/查看端口占用并杀死进程.md"},t=l(`<h1 id="在linux上使用-lsof-和-kill-命令查看端口占用并杀死进程" tabindex="-1">在Linux上使用 lsof 和 kill 命令查看端口占用并杀死进程 <a class="header-anchor" href="#在linux上使用-lsof-和-kill-命令查看端口占用并杀死进程" aria-label="Permalink to &quot;在Linux上使用 lsof 和 kill 命令查看端口占用并杀死进程&quot;">​</a></h1><p>在Linux系统上，了解端口的使用情况对于系统管理和故障排除至关重要。当某个端口被占用但你不知道是哪个进程在使用它时，你可能需要找出相关信息并杀死该进程。本文将介绍如何使用 lsof 命令查看端口占用情况以及如何使用 kill 命令杀死占用该端口的进程。</p><h2 id="使用-lsof-命令查看端口占用情况" tabindex="-1">使用 lsof 命令查看端口占用情况 <a class="header-anchor" href="#使用-lsof-命令查看端口占用情况" aria-label="Permalink to &quot;使用 lsof 命令查看端口占用情况&quot;">​</a></h2><p>lsof 命令（List Open Files）用于列出当前系统中已打开的文件。由于在Unix系统中，网络端口也是以文件形式管理的，因此我们可以用 lsof 来查看端口的占用情况。</p><h1 id="查看指定端口的占用情况" tabindex="-1">查看指定端口的占用情况 <a class="header-anchor" href="#查看指定端口的占用情况" aria-label="Permalink to &quot;查看指定端口的占用情况&quot;">​</a></h1><p>使用以下命令来查看某个特定端口的占用情况：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lsof</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">端口</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">号</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>例如，查看端口8080的占用情况：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lsof</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :8080</span></span></code></pre></div><p>执行上述命令后，你会看到类似如下的输出：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">COMMAND</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  PID</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> USER</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   FD</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   TYPE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> DEVICE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> SIZE/OFF</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> NODE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> NAME</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nginx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   1234</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   6u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  IPv4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  12345</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      0t0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  TCP</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:8080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (LISTEN)</span></span></code></pre></div><h1 id="使用-kill-命令杀死进程" tabindex="-1">使用 kill 命令杀死进程 <a class="header-anchor" href="#使用-kill-命令杀死进程" aria-label="Permalink to &quot;使用 kill 命令杀死进程&quot;">​</a></h1><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kill</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -9</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">PI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">D</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>例如：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kill</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -9</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1234</span></span></code></pre></div><h2 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h2><p>使用 kill -9 要慎重：kill -9 强制终止进程，可能会导致数据丢失或状态不一致，优先考虑使用 kill -15 进行正常的进程终止：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kill</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -15</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">PI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">D</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>例如：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kill</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -15</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1234</span></span></code></pre></div>`,20),n=[t];function e(p,k,d,o,F,r){return a(),i("div",null,n)}const C=s(h,[["render",e]]);export{c as __pageData,C as default};
