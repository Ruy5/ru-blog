import{_ as a,c as e,o as t,a4 as o,ac as r,ad as _}from"./chunks/framework.CdAejZTV.js";const b=JSON.parse('{"title":"爬虫 插桩","description":"","frontmatter":{},"headers":[],"relativePath":"blog/爬虫/爬虫 插桩.md","filePath":"blog/爬虫/爬虫 插桩.md"}'),p={name:"blog/爬虫/爬虫 插桩.md"},s=o('<h1 id="爬虫-插桩" tabindex="-1">爬虫 插桩 <a class="header-anchor" href="#爬虫-插桩" aria-label="Permalink to &quot;爬虫 插桩&quot;">​</a></h1><p>在我了解插桩之前，一直不知道插桩是什么，能有什么用。终于 我今天去学习了一下！！！</p><h2 id="什么是插桩" tabindex="-1">什么是插桩 <a class="header-anchor" href="#什么是插桩" aria-label="Permalink to &quot;什么是插桩&quot;">​</a></h2><p>有些时候我们想获取某个变量的值，看其如何变化！但是又不想每次都是断点之后再在控制台打印，那么有没有什么简便的办法呢？那就是插桩！</p><p>插桩的主要应用场景就是在面对一个复杂的控制流时，可以通过插桩实现环境自吐。</p><h2 id="插桩实现" tabindex="-1">插桩实现 <a class="header-anchor" href="#插桩实现" aria-label="Permalink to &quot;插桩实现&quot;">​</a></h2><p><img src="'+r+'" alt="插桩1.png"></p><p>对js代码 打一个断点， 右键 编辑断点</p><p><img src="'+_+'" alt="插桩2.png"></p><p>选则日志断点，在编辑框中 写日志内容 等同于 console.log(&quot;变量名：&quot; + 1)</p><p>然后正常运行即可</p><p>这样就可以看到整个控制流的流程，方便我们下一步操作</p><p>注：我这里演示的是最简单的浏览器插桩，同样也可以使用中间人攻击的方式插桩</p>',13),n=[s];function c(i,l,d,h,m,u){return t(),e("div",null,n)}const g=a(p,[["render",c]]);export{b as __pageData,g as default};
